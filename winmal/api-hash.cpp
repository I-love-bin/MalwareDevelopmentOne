#include <iostream>
#include <windows.h>
#include <iostream>

DWORD GetHashFromString( char *str ) {
	size_t stringLength = strnlen_s(str, 50);
	DWORD hash = 0x35;

	for (size_t i = 0; i < stringLength; i++) {
		hash += (hash * 0xdeadbeef + str[i]) & 0xffffff;
	}
	return hash;
}

PDWORD GetFunctionAddrByHash(char* lib, DWORD hash) {
	PDWORD functionAddr = 0;

	HMODULE libraryBase = LoadLibraryA(lib);
	PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)libraryBase;
	PIMAGE_NT_HEADERS imageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD_PTR)libraryBase + dosHeader->e_lfanew);
	DWORD_PTR exportDirectryRVA = imageNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;
	PIMAGE_EXPORT_DIRECTORY imageExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((DWORD_PTR)libraryBase + exportDirectryRVA);
	PDWORD addressOfFunctionsRVA = (PDWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfFunctions);
	PDWORD addressOfNamesRVA = (PDWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfNames);
	PWORD addressOfNameOrdinalsRVA = (PWORD)((DWORD_PTR)libraryBase + imageExportDirectory->AddressOfNameOrdinals);
	
	for (DWORD i = 0; i < imageExportDirectory->NumberOfFunctions; i++) {
		DWORD functionNameRVA = addressOfNamesRVA[i];
		DWORD_PTR functionNameVA = (DWORD_PTR)libraryBase + functionNameRVA;
		char* functionName = (char*)functionNameVA;
		DWORD_PTR functionAddressRVA = 0;
		DWORD functionNameHash = GetHashFromString( functionName );
		if (functionNameHash == hash) {
			functionAddressRVA = addressOfFunctionsRVA[addressOfNameOrdinalsRVA[i]];
			functionAddr = (PDWORD)((DWORD_PTR)libraryBase + functionAddressRVA);
			return functionAddr;
		}
	}
}